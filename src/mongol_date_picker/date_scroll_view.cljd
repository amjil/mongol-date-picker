(ns mongol-date-picker.date-scroll-view
  (:require ["package:flutter/material.dart" :as m]
            ["package:mongol/mongol.dart" :as mgl]
            [cljd.flutter.alpha2 :as f]
            [mongol-date-picker.contants :as constants]
            [mongol-date-picker.util.options :as options]
            [mongol-date-picker.util.month-dates :as month-dates]
            [mongol-date-picker.date-scroll-view :as date-scroll-view]))


(defn date-scroll-item [label date-type x]
  (f/widget
   :get [:state]
   :watch [{:keys [year month day]} state]
   (m/Container
    .alignment (:alignment options/scroll-view-detail-options)
    .child
    (m/RotatedBox
     .quarterTurns 1
     .child
     (mgl/MongolText
      (str x label)
      .style (if
              (condp = date-type
                :year (= (nth (:years @state) year) x)
                :month (= (nth (:months @state) month) x)
                :day (= (nth (:days @state) day) x)
                false)
               (:selected-text-style options/scroll-view-detail-options)
               (:text-style options/scroll-view-detail-options)))))))

(defn date-scroll-view [label date-type]
  (f/widget
   :get [:state 
         :year-controller 
         :month-controller
         :day-controller 
         :on-year-changed 
         :on-month-changed
         :on-day-changed]
   :watch [{:keys [year month day]} state]
   :context ctx
   :let [scroll-values (condp = date-type
                         :year (:years @state)
                         :month (:months @state)
                         :day (:days @state))
         muximum-count (quot (-> m/MediaQuery (.of ctx) .-size .-width)
                             (:item-extent options/date-picker-options))
         loop? (and (:loop? options/date-picker-options)
                    (> (count scroll-values) muximum-count))]
   (m/Container
    .margin (:margin options/scroll-view-detail-options)
    .height 80
    .child
    (m/RotatedBox
     .quarterTurns 3
     .child
     (.useDelegate
      m/ListWheelScrollView
      .itemExtent (:item-extent options/date-picker-options)
      .diameterRatio (:diameter-ratio options/date-picker-options)
      .controller (condp = date-type
                    :year year-controller
                    :month month-controller
                    :day day-controller
                    ;;default
                    year-controller)
      .physics (m/FixedExtentScrollPhysics)
      .perspective (:perspective options/date-picker-options)
      .onSelectedItemChanged (condp = date-type
                               :year on-year-changed
                               :month on-month-changed
                               :day on-day-changed
                               ;;default
                               on-day-changed)
      .childDelegate
      (if loop?
        (m/ListWheelChildLoopingListDelegate
         .children
         (for [x scroll-values]
           (date-scroll-item label date-type x)))

        (m/ListWheelChildListDelegate
         .children
         (for [x scroll-values]
           (date-scroll-item label date-type x)))))))))

(defn date-view []
  (f/widget
   :get [:state m/Theme m/ScaffoldMessenger
         :day-controller]
   :context ctx
   :watch [{:keys [selected-date year month day days]} state]
   :let [update-days (fn []
                       (let [days (month-dates/dates
                                   (nth (:years @state) (:year @state))
                                   (nth (:months @state) (:month @state)))]
                         (swap! state assoc :days (range 1 (inc days)))
                         (when (> (:day @state) (dec days))
                           (swap! state assoc :day (dec days))
                           (.jumpToItem day-controller (dec days)))))]
   :bind {:on-year-changed (fn [i]
                             (swap! state assoc :year i)
                             (update-days))
          :on-month-changed (fn [i]
                              (swap! state assoc :month i)
                              (update-days))
          :on-day-changed (fn [i] (swap! state assoc :day i))}
   (m/Center
    .child
    (m/Column
     .children
     [(mgl/MongolText (str (nth (:years @state) (:year @state)) "-"
                           (if (> 9 (:month @state)) "0") (nth (:months @state) (:month @state)) "-"
                           (if (> 9 (:day @state)) "0") (nth (:days @state) (:day @state))))
      (m/Stack
       .alignment m.Alignment/center
       .children
       [(m/Column
         .children
         [(date-scroll-view
           constants/year-suffix
           :year)
          (date-scroll-view
           constants/month-suffix
           :month)
          (date-scroll-view
           ""
           :day)])
        (m/IgnorePointer
         .child
         (m/Row
          .mainAxisAlignment m.MainAxisAlignment/center
          .children
          [(m/Expanded
            .child
            (m/Container
             .height (-> m/MediaQuery (.of ctx) .-size .-width)
             .decoration
             (m/BoxDecoration
              .gradient
              (m/LinearGradient
               .begin (.centerLeft m/Alignment)
               .end (.centerRight m/Alignment)
               .colors [(-> m/Theme
                            (.of ctx)
                            .-scaffoldBackgroundColor)
                        (-> m/Theme
                            (.of ctx)
                            .-scaffoldBackgroundColor
                            (.withOpacity 0.7))]))))
           (m/Container
            .width 30.0
            .height (-> m/MediaQuery (.of ctx) .-size .-width)
            .decoration
            (m/BoxDecoration .color
                             (-> m/Colors
                                 .grey
                                 (.withOpacity 0.15))
                             .borderRadius
                             (.all m/BorderRadius (.circular m/Radius 4))))
           (m/Expanded
            .child
            (m/Container
             .height (-> m/MediaQuery (.of ctx) .-size .-width)
             .decoration
             (m/BoxDecoration
              .gradient
              (m/LinearGradient
               .begin (.centerLeft m/Alignment)
               .end (.centerRight m/Alignment)
               .colors [(-> m/Theme
                            (.of ctx)
                            .-scaffoldBackgroundColor
                            (.withOpacity 0.7))
                        (-> m/Theme
                            (.of ctx)
                            .-scaffoldBackgroundColor)]))))]))])]))))
