(ns mongol-date-picker.date-scroll-view
  (:require ["package:flutter/material.dart" :as m]
            ["package:mongol/mongol.dart" :as mgl]
            [cljd.flutter.alpha2 :as f]
            [mongol-date-picker.contants :as constants]
            [mongol-date-picker.util.options :as options]
            [mongol-date-picker.util.month-dates :as month-dates]
            [mongol-date-picker.date-scroll-view :as date-scroll-view]))

(defn date-scroll-view [date-type label scroll-values controller on-changed-fn]
  (f/widget
   :get [:state]
   :watch [{:keys [year month day]} state]
   (m/Container
    .margin (:margin options/scroll-view-detail-options)
    .height 80
    .child
    (m/RotatedBox
     .quarterTurns 3
     .child
     (.useDelegate
      m/ListWheelScrollView
      .itemExtent (:item-extent options/date-picker-options)
      .diameterRatio (:diameter-ratio options/date-picker-options)
      .controller controller
      .physics (m/FixedExtentScrollPhysics)
      .perspective (:perspective options/date-picker-options)
      .onSelectedItemChanged on-changed-fn
      .childDelegate
      (m/ListWheelChildListDelegate
       .children
       (for [x scroll-values]
         (m/Container
          .alignment (:alignment options/scroll-view-detail-options)
          .child
          (m/RotatedBox
           .quarterTurns 1
           .child
           (mgl/MongolText
            (str x label)
            .style (if
                    (condp = date-type
                      :year (= (nth (:years @state) year) x)
                      :month (= (nth (:months @state) month) x)
                      :day (= (nth (:days @state) day) x)
                      false)
                     (:selected-text-style options/scroll-view-detail-options)
                     (:text-style options/scroll-view-detail-options))))))))))))

(defn date-view []
  (f/widget
   :get [:state m/Theme m/ScaffoldMessenger]
   :context ctx
   :watch [{:keys [selected-date year month day days]} state]
   :let [year-controller (m/FixedExtentScrollController .initialItem year)
         month-controller (m/FixedExtentScrollController .initialItem month)
         day-controller (m/FixedExtentScrollController .initialItem day)
         update-days (fn []
                      ;;  (.showSnackBar
                      ;;   scaffold-messenger
                      ;;   (m/SnackBar
                      ;;    .content (m/Text (str "Yay! A SnackBar!" (nth (:years @state) (:year @state))))))
                       (let [days (month-dates/dates
                                   (nth (:years @state) (:year @state))
                                   (nth (:months @state) (:month @state)))]
                         (swap! state assoc :days (range 1 (inc days)))
                         (if (> (:day @state) (dec days))
                           (swap! state assoc :day (dec days)))))
         on-year-changed (fn [i]
                           (swap! state assoc :year i)
                           (update-days))
         on-month-changed (fn [i]
                            (swap! state assoc :month i)
                            (update-days))
         on-day-changed (fn [i] (swap! state assoc :day i))]
   (m/Center
    .child
    (m/Column
     .children
     [(mgl/MongolText (str (nth (:years @state) (:year @state)) "-" 
                           (nth (:months @state) (:month @state)) "-"
                           (nth (:days @state) (:day @state))))
      (m/Stack
       .alignment m.Alignment/center
       .children
       [(m/Column
         .children
         [(date-scroll-view
           :year
           constants/year-suffix (range 1900 2024)
           year-controller
           on-year-changed)
          (date-scroll-view
           :month
           constants/month-suffix (range 1 13)
           month-controller
           on-month-changed)
          (date-scroll-view
           :day
           "" days
           day-controller
           on-day-changed)])
        (m/IgnorePointer
         .child
         (m/Row
          .mainAxisAlignment m.MainAxisAlignment/center
          .children
          [(m/Expanded
            .child
            (m/Container
             .height 300
             .decoration
             (m/BoxDecoration
              .gradient
              (m/LinearGradient
               .begin (.centerLeft m/Alignment)
               .end (.centerRight m/Alignment)
               .colors [(-> m/Theme
                            (.of ctx)
                            .-scaffoldBackgroundColor)
                        (-> m/Theme
                            (.of ctx)
                            .-scaffoldBackgroundColor
                            (.withOpacity 0.7))]))))
           (m/Container
            .width 30.0
            .decoration
            (m/BoxDecoration .color (-> m/Colors
                                        .grey
                                        (.withOpacity 0.15))
                             .borderRadius
                             (.all m/BorderRadius (.circular m/Radius 4))))
           (m/Expanded
            .child
            (m/Container
             .height 300
             .decoration
             (m/BoxDecoration
              .gradient
              (m/LinearGradient
               .begin (.centerLeft m/Alignment)
               .end (.centerRight m/Alignment)
               .colors [(-> m/Theme
                            (.of ctx)
                            .-scaffoldBackgroundColor
                            (.withOpacity 0.7))
                        (-> m/Theme
                            (.of ctx)
                            .-scaffoldBackgroundColor)]))))]))])
      ]))))
