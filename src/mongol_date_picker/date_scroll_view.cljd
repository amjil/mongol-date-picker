(ns mongol-date-picker.date-scroll-view
  (:require ["package:flutter/material.dart" :as m]
            ["package:mongol/mongol.dart" :as mgl]
            [cljd.flutter.alpha2 :as f]
            [mongol-date-picker.contants :as constants]
            [mongol-date-picker.options :as options]
            [mongol-date-picker.util.month-dates :as month-dates]
            [mongol-date-picker.date-scroll-view :as date-scroll-view]))


(defn date-scroll-item [item]
  (f/widget
   (m/Container
    .alignment (:alignment options/scroll-view-detail-options)
    .child
    (m/RotatedBox
     .quarterTurns 1
     .child
     (mgl/MongolText
      (str item)
      .style (:text-style options/scroll-view-detail-options))))))

(defn date-scroll-view [info state k]
  ;; info {:height xxx :on-change (fn [] xxx)
  ;;       :controller xxxx
  ;;       :item-suffix xxx :item-prefix xxx}
  ;; k => :year
  ;; state => {:year {:idx 0 :val nil :list [x1 x2 x3 ...]}}
  (f/widget
   :context ctx
   :let [muximum-count (quot (-> m/MediaQuery (.of ctx) .-size .-width)
                             (:item-extent options/date-picker-options))
         loop? (and (:loop? options/date-picker-options)
                    (> (count (get-in @state [k :list])) muximum-count))]
   (m/Container
    .margin (:margin options/scroll-view-detail-options)
    .height (if (number? (:height info))
              100
              (:height info))
    .width (- (-> m/MediaQuery (.of ctx) .-size .-width) 60)
    .child
    (m/RotatedBox
     .quarterTurns 3
     .child
     (.useDelegate
      m/ListWheelScrollView
      .itemExtent (:item-extent options/date-picker-options)
      .diameterRatio (:diameter-ratio options/date-picker-options)
      .magnification 1.2
      .overAndUnderCenterOpacity 0.4
      .controller (:controller info)
      .physics (m/FixedExtentScrollPhysics)
      .perspective (:perspective options/date-picker-options)
      .onSelectedItemChanged (fn [i]
                               (swap! state assoc-in (conj [] k :idx) i)
                               (swap! state assoc-in (conj [] k :val) (get (get-in @state [k :list]) i))
                               (when-not (nil? (:on-change info))
                                 (:on-change info)))
      .childDelegate
      (if loop?
        (m/ListWheelChildLoopingListDelegate
         .children
         (map (fn [itm] (date-scroll-item itm))
              (get-in @state [k :list])))
        (m/ListWheelChildListDelegate
         .children
         (map (fn [itm] (date-scroll-item itm))
              (get-in @state [k :list])))))))))

(defn date-picker-widget [controllers state]
  (f/widget
   :context ctx
   :watch [{{year :val} :year
            {month :val} :month
            {day :val} :day} state]
   :bg-watcher ([{{year :val} :year
                  {month :val} :month} state]
                (let [days (month-dates/dates year month)
                      day-index (get-in @state [:day :idx])]
                  (swap! state assoc-in [:day :list] (range 1 (inc days)))
                  (when (> day-index (dec days))
                    (swap! state assoc-in [:day :idx] (dec days))
                    (swap! state assoc-in [:day :val] (last days)))))
  ;;  (m/Container 
  ;;   .height 600)
  ;;  (m/Center
  ;;   .child
     (m/Column
      .children
      [(m/Text (str year "-" month "-" day))
       (date-scroll-view
        {:controller (:year controllers) :height 100}
        state
        :year)
       (date-scroll-view
        {:controller (:month controllers) :height 100}
        state
        :month)
       (date-scroll-view
        {:controller (:day controllers) :height 100}
        state
        :day)])))

(defn date-picker []
  (let [now (DateTime/now)
        year (.-year now)
        month (.-month now)
        day (.-day now)
        years (range (- year 100) (+ year 101))
        months (range 1 13)
        days (range 1 (inc (month-dates/dates year month)))
        
        year-index (get (into {}
                              (map-indexed (fn [idx itm] (hash-map itm idx))
                                           years))
                        year)
        month-index (dec month)
        day-index (dec day)
        
        state (atom {:year {:list years :idx year-index :val year}
                     :month {:list months :idx month-index :val month}
                     :day {:list days :idx day-index :val day}})
        ]
    (f/widget
     :managed [year-controller (m/FixedExtentScrollController .initialItem year-index)
               month-controller (m/FixedExtentScrollController .initialItem month-index)
               day-controller (m/FixedExtentScrollController .initialItem day-index)]
     (date-picker-widget {:year year-controller
                          :month month-controller
                          :day day-controller}
                         state))))